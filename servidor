#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

msganterior = b''
dictnicks = {}
dictnicksupper = {}

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    global msganterior
    global dictnicks
    global dictnicksupper

    dados = msganterior + dados
    if dados == b'':
        return sair(conexao)
    
    dadosatual = dados.split(b'\n')

    if dados.endswith(b'\n'):
        msganterior = b''

    else:
        msganterior = dadosatual[len(dadosatual)-1]

    for msgparcial in range(len(dadosatual)-1):
        #TRATAMENTO PING
        if dadosatual[msgparcial].startswith(b'PING'):
            conexao.enviar(b':server PONG server :' + dadosatual[msgparcial].split(b' ', 1)[1] + b'\n')

        #TRATAMENTO NICK
        if dadosatual[msgparcial].startswith(b'NICK'):
            nick = dadosatual[msgparcial].split(b' ',1)[1]
            nick = nick.split(b'\r')[0]
            nickupper = nick.upper()
            if validar_nome(nick):
                if conexao not in dictnicks.keys():
                        if nick not in dictnicks.values() and nickupper not in dictnicksupper.values(): 
                            dictnicks[conexao] = nick
                            dictnicksupper[conexao] = nickupper
                            conexao.enviar(b':server 001 ' + nick + b' :Welcome\r\n')
                            conexao.enviar(b':server 422 ' + nick + b' :MOTD File is missing\r\n')
                        else:
                            conexao.enviar(b':server 433 * ' + nick + b' :Nickname is already in use\r\n')
                else: 
                    if nick not in dictnicks.values() and nickupper not in dictnicksupper.values():
                        conexao.enviar(b':' + dictnicks[conexao] + b' NICK ' + nick + b'\r\n')
                        dictnicks[conexao] = nick
                        dictnicksupper[conexao] = nickupper
                    else:
                        conexao.enviar(b':server 433 ' + dictnicks[conexao] + b' ' + nick + b' :Nickname is already in use\r\n')
            else:
                conexao.enviar(b':server 432 * ' + nick + b' :Erroneous nickname\r\n')
        
        #TRATAMENTO PRIVMSG
        if dadosatual[msgparcial].startswith(b'PRIVMSG'):
            nickdest = dadosatual[msgparcial].split(b' ')[1]
            conteudo = dadosatual[msgparcial].split(b' :',1)[1]
            nickdestupper = nickdest.upper()
            if nickdestupper in dictnicksupper.values():
                for key, value in dictnicksupper.items():
                    if value == nickdestupper:
                        key.enviar(b':' + dictnicks[conexao] + b' PRIVMSG ' + nickdest + b' :' + conteudo + b'\n') 
                #conexaodest.enviar(b':' + dictnicks[conexao] + b' PRIVMSG ' + dictnicks[conexaodest] + b' :' + conteudo + b'\r\n') 

      
    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
