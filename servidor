#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

msganterior = b''
dictnicks = {}
msgcompleta = False

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    global msganterior
    global dictnicks

    dados = dados + msganterior
    if dados == b'':
        return sair(conexao)
    
    dadosatual = dados.split(b'\n')

    if dados.endswith(b'\n'):
        msganterior = b''
        msgcompleta = True
    else:
        msganterior = dadosatual[len(dadosatual)-1]
        msgcompleta = False

    if msgcompleta:
        for msgparcial in range(len(dadosatual)-1):
            #TRATAMENTO PING
            if dadosatual[msgparcial].startswith(b'PING'):
                conexao.enviar(b':server PONG server :' + dadosatual[msgparcial].split(b' ', 1)[1] + b'\n')

            #TRATAMENTO NICK
            if dadosatual[msgparcial].startswith(b'NICK'):
                nick = dadosatual[msgparcial].split(b' ',1)[1]
                nick = nick.split(b'\r')[0]
                if validar_nome(nick):
                    if conexao not in dictnicks.keys():
                            if nick not in dictnicks.values(): 
                                dictnicks[conexao] = nick
                                conexao.enviar(b':server 001 ' + nick + b' :Welcome\r\n')
                                conexao.enviar(b':server 422 ' + nick + b' :MOTD File is missing\r\n')
                            else:
                                conexao.enviar(b':server 433 ' + conexao + b' ' + nick + b' :Nickname is already in use\r\n')
                    else: 
                        if nick not in dictnicks.values():
                            conexao.enviar(b':' + dictnicks[conexao] + b' NICK ' + nick + b'\r\n')
                            dictnicks[conexao] = nick
                        else:
                            conexao.enviar(b':server 433 ' + dictnicks[conexao] + b' ' + nick + b' :Nickname is already in use\r\n')
                else:
                    conexao.enviar(b':server 432 * ' + nick + b' :Erroneous nickname\r\n')
        msgcompleta = False
      
    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
