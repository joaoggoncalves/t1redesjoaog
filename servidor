#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

msganterior = b''
dictnicks = {}
dictnicksupper = {}
dictcanais = {}

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def avisacanal(nomecanalmsg, conexao):
    global dictnicks
    global dictcanais
    if nomecanalmsg in dictcanais.keys():
        for i in range(len(dictcanais[nomecanalmsg])):
            dictcanais[nomecanalmsg][i-1].enviar(b':' + dictnicks[conexao] + b' JOIN :#' + nomecanalmsg + b'\r\n')

def mandamsgcanal(nomecanalmsg, conexao, conteudo):
    global dictnicks
    global dictcanais
    nomecanalmsg = nomecanalmsg.lower()
    if nomecanalmsg in dictcanais.keys():
        for i in range(len(dictcanais[nomecanalmsg])):
            if dictcanais[nomecanalmsg][i-1] != conexao:
                dictcanais[nomecanalmsg][i-1].enviar(b':' + dictnicks[conexao] + b' PRIVMSG #' + nomecanalmsg + b' :' + conteudo + b'\n')

def mandamsguser(conexao, nickdestupper, conteudo, nickdest):
    global dictnicks
    global dictnicksupper
    if nickdestupper in dictnicksupper.values():
        for key, value in dictnicksupper.items():
            if value == nickdestupper:
                key.enviar(b':' + dictnicks[conexao] + b' PRIVMSG ' + nickdest + b' :' + conteudo + b'\n') 


def dados_recebidos(conexao, dados):
    global msganterior
    global dictnicks
    global dictnicksupper
    global dictcanais

    dados = msganterior + dados
    if dados == b'':
        return sair(conexao)
    
    dadosatual = dados.split(b'\n')

    if dados.endswith(b'\n'):
        msganterior = b''

    else:
        msganterior = dadosatual[len(dadosatual)-1]

    for msgparcial in range(len(dadosatual)-1):
        #TRATAMENTO PING
        if dadosatual[msgparcial].startswith(b'PING'):
            conexao.enviar(b':server PONG server :' + dadosatual[msgparcial].split(b' ', 1)[1] + b'\n')

        #TRATAMENTO NICK
        if dadosatual[msgparcial].startswith(b'NICK'):
            nick = dadosatual[msgparcial].split(b' ',1)[1]
            nick = nick.split(b'\r')[0]
            nickupper = nick.upper()
            if validar_nome(nick):
                if conexao not in dictnicks.keys():
                        if nick not in dictnicks.values() and nickupper not in dictnicksupper.values(): 
                            dictnicks[conexao] = nick
                            dictnicksupper[conexao] = nickupper
                            conexao.enviar(b':server 001 ' + nick + b' :Welcome\r\n')
                            conexao.enviar(b':server 422 ' + nick + b' :MOTD File is missing\r\n')
                        else:
                            conexao.enviar(b':server 433 * ' + nick + b' :Nickname is already in use\r\n')
                else: 
                    if nick not in dictnicks.values() and nickupper not in dictnicksupper.values():
                        conexao.enviar(b':' + dictnicks[conexao] + b' NICK ' + nick + b'\r\n')
                        dictnicks[conexao] = nick
                        dictnicksupper[conexao] = nickupper
                    else:
                        conexao.enviar(b':server 433 ' + dictnicks[conexao] + b' ' + nick + b' :Nickname is already in use\r\n')
            else:
                conexao.enviar(b':server 432 * ' + nick + b' :Erroneous nickname\r\n')

        #TRATAMENTO JOIN
        if dadosatual[msgparcial].startswith(b'JOIN'):
            try:
                nomecanal = dadosatual[msgparcial].split(b' #',1)[1]
                nomecanal = nomecanal.split(b'\r')[0]
                nomecanal = nomecanal.lower()
                if validar_nome(nomecanal):
                    dictcanais.setdefault(nomecanal, [])
                    dictcanais[nomecanal].append(conexao)
                    avisacanal(nomecanal, conexao)
                else:
                    conexao.enviar(b':server 403 ' + nomecanal + b' :No such channel\r\n')
            except IndexError:
                conexao.enviar(b':server 403 * :No such channel\r\n')

        
        #TRATAMENTO PRIVMSG
        if dadosatual[msgparcial].startswith(b'PRIVMSG'):
            nickdest = dadosatual[msgparcial].split(b' ')[1]
            conteudo = dadosatual[msgparcial].split(b' :',1)[1]
            nickdestupper = nickdest.upper()
            #MENSAGEM PARA USUARIO
            mandamsguser(conexao, nickdestupper, conteudo, nickdest)
            #MENSAGEM PARA CANAL
            if nickdest.startswith(b'#'):
                nomecanalmsg = nickdest.split(b'#')[1]
                mandamsgcanal(nomecanalmsg, conexao, conteudo)


      
    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
